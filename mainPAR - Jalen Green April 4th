import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures

def prepare_data(sequence):
    X = np.arange(len(sequence)).reshape(-1, 1)
    y = np.array(sequence).reshape(-1, 1)
    return X, y

def train_and_predict_next_number(X, y, degree):
    poly = PolynomialFeatures(degree=degree)
    X_poly = poly.fit_transform(X)
    model = LinearRegression()
    model.fit(X_poly, y)
    next_index = len(y)
    next_index_poly = poly.fit_transform([[next_index]])
    next_number_prediction = model.predict(next_index_poly)
    return max(0, next_number_prediction[0][0])  # Set a lower limit of 0

# Input sequences
sequences = [
    {'data': [16, 33, 22, 25, 17, 11, 15, 13, 22, 21, 34, 21, 33, 25, 17, 16, 16, 30, 28, 17, 16, 30, 13, 27, 14, 30, 26, 22, 15, 13, 21, 23, 24, 28, 23, 16, 20, 16, 30, 9, 26, 27, 23, 41, 10, 42, 19, 6, 12, 27, 41, 11, 29, 14, 17, 20, 12, 31, 25, 24, 18, 28, 11, 25, 40, 20, 32, 13, 30, 19, 14, 32, 24], 'label': 'points'},
    {'data': [3, 2, 2, 3, 2, 2, 2, 1, 1, 4, 3, 6, 6, 7, 6, 5, 4, 5, 9, 7, 3, 2, 3, 7, 2, 3, 4, 1, 4, 2, 1, 4, 3, 2, 4, 3, 4, 4, 4, 5, 3, 2, 3, 7, 2, 4, 7, 3, 4, 3, 2, 4, 4, 2, 5, 3, 4, 2, 1, 4, 7, 3, 1, 6, 1, 2, 3, 5, 4, 4, 5, 5, 7], 'label': 'assists'},
    {'data': [5, 5, 4, 3, 7, 6, 1, 4, 4, 2, 3, 6, 2, 6, 7, 5, 5, 5, 2, 2, 3, 3, 1, 4, 3, 7, 7, 5, 5, 1, 8, 8, 6, 4, 4, 3, 5, 4, 4, 5, 5, 2, 5, 5, 0, 4, 4, 0, 2, 3, 2, 5, 3, 2, 2, 3, 0, 2, 2, 3, 2, 7, 6, 7, 4, 3, 3, 2, 1, 3, 3, 1, 3], 'label': 'rebounds'},
    {'data': [1, 4, 4, 4, 2, 2, 2, 1, 3, 4, 5, 2, 5, 3, 1, 0, 1, 3, 6, 1, 1, 2, 0, 0, 2, 3, 1, 1, 0, 1, 4, 0, 6, 3, 4, 3, 2, 2, 4, 1, 3, 5, 3, 4, 1, 6, 2, 2, 2, 5, 6, 0, 2, 2, 3, 4, 0, 4, 1, 2, 3, 2, 2, 1, 4, 3, 3, 0, 5, 1, 0, 2, 2], 'label': '3P Made'}  # New input sequence
]

# Polynomial degree
degree = 2

print("The predicted next numbers in the sequences are:")
for seq in sequences:
    X, y = prepare_data(seq['data'])
    next_number_prediction = train_and_predict_next_number(X, y, degree)
    print(f"{seq['label'].capitalize()}: {next_number_prediction:.2f}")
